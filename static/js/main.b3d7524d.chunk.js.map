{"version":3,"sources":["Context.js","TodoItem.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","TodoItem","_ref","title","id","completed","color","_useContext","useContext","removeTask","toggleTodo","cls","push","react_default","a","createElement","className","join","style","backgroundColor","borderRadius","type","checked","onChange","onClick","TodoList","todos","map","item","Object","assign","key","App","_useState","useState","_useState2","slicedToArray","setTodos","_useState3","_useState4","todosTitle","setTodosTitle","_useState5","_useState6","colorBg","setColorBg","useEffect","raw","localStorage","getItem","JSON","parse","setItem","stringify","Provider","value","toConsumableArray","filter","todo","class","marginTop","fontSize","document","body","background","cjs_default","axis","display","cursor","maxWidth","justifyContent","margin","padding","e","target","onKeyPress","trim","concat","Date","now","randomColor","luminosity","alpha","marginLeft","paddingLeft","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b3d7524d.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\n\r\nexport const Context = React.createContext()","import React, {useState, useContext} from 'react'\nimport { Context } from './Context'\nimport { Draggable } from 'react-draggable';\n\nexport default function TodoItem({title, id, completed, color}) {\n\n\nconst {removeTask,toggleTodo}=useContext(Context)\n\n\n\nconst cls = ['todo']\nif (completed){\n  cls.push('completed')\n}\n\n\n\n\n  return (\n    \n    <div>\n    <li className={cls.join(\"  \")}>\n      \n      <label style={{backgroundColor: color, borderRadius:'10px'}}>\n        <input\n          type=\"checkbox\"\n          checked={completed}\n          onChange={()=>toggleTodo(id)}\n        />\n        <span style={{color:'black'}}>{title}</span>\n\n        <i\n        onClick={()=>{removeTask(id)}}\n          className=\"material-icons red-text\"\n        >\n          delete\n        </i>\n      </label>\n    </li>\n    </div>\n    \n  )\n \n}","import React from 'react'\nimport TodoItem from './TodoItem'\nimport { Draggable } from 'react-draggable';\n\n\nexport default function TodoList({todos}) {\n  \n  return (\n    \n    \n    <ul>\n      {todos.map(item => <TodoItem key={item.id} {...item}  />)}\n    </ul>\n    \n    \n    \n  )\n}","import React, {useState, useEffect} from 'react'\nimport TodoList from './TodoList'\nimport { Context } from './Context'\nimport {randomColor} from 'randomcolor'\nimport Draggable from 'react-draggable'\n\n\n\nexport default function App () {\n  \nconst [todos, setTodos]= useState([\n  {id: 1, title: 'First todo', completed: true},\n  {id: 2, title: 'Second todo', completed: false},\n])\n\nconst [todosTitle,setTodosTitle]= useState('')\n  \nconst [colorBg,setColorBg]= useState(true)\n\nuseEffect(()=>{\nconst raw = localStorage.getItem('todos')\nsetTodos(JSON.parse(raw) || [])\n},[])\n\nuseEffect(()=>{\n  localStorage.setItem('todos', JSON.stringify(todos))\n  },[todos])\n\n\n\nconst addTodo=(e)=>{\n  if(e.key === 'Enter' && todosTitle.trim() !== ''){\n    setTodos([\n...todos,\n{ \nid: Date.now(),\ntitle:todosTitle,\ncompleted: false,\ncolor: randomColor({\n  luminosity: 'light',\n  alpha: 0.01,\n})\n}\n  ])\nsetTodosTitle('')\n  }\n}\nconst removeTask = (id) => {\n  setTodos([...todos.filter((todo) => todo.id !== id)])\n}\n// const removeTodo=id=>{\n// setTodos(todos.filter(todo=>{\n//   return todo.id !== id\n// }))\n// }\n\n\nconst toggleTodo = id =>{\n  setTodos(todos.map(todo =>{\n    if(todo.id === id){\n      todo.completed = !todo.completed\n    }\n    return todo\n  }))\n}\n\nfunction changeColor(){\n\n  if(colorBg === true){\n    document.body.style.background = 'black'\n    document.body.style.color = 'white'\n    \n    setColorBg(false)\n  }else{\n    document.body.style.background = 'white'\n    document.body.style.color = 'black'\n  // document.getElementsByClassName(\"input-field\").style.color ='black'\n    setColorBg(true)\n  }\n\n}\n\n\n\n    return (\n      <Context.Provider\n      value={{\n        removeTask, toggleTodo\n      }}\n      > \n      <div className=\"container\">\n      \n\n\n      <div class=\"switch \" style={{marginTop:'20px'}} >\n    <label style={{fontSize:'20px'}}onChange={changeColor}>\n      Light Mod\n      <input className='' type=\"checkbox\"/>\n      <span class=\"lever\"></span>\n      Black Mod\n    </label>\n  </div>\n\n        <Draggable\n        axis=\"x\"\n        >\n      <div \n      style={{display:'flex', cursor:'pointer',maxWidth:'50%',justifyContent:'center', margin:'0 auto', borderRadius:'50px'}}\n      title='Draggab me'\n      className=' waves-effect'\n       >\n        <i class=\"Medium material-icons\" style={{margin: `4.5rem 0 1.68rem 0`}}>arrow_back</i>\n        <h1  style={{padding:`0 20px`}}>Todo list</h1>\n        <i class=\"Medium material-icons\" style={{margin: `4.5rem 0 1.68rem 0`}}>arrow_forward</i>\n      </div>\n        </Draggable>\n          <div className='input-field'>\n            <input \n            type=\"text\"\n            value={todosTitle}\n            onChange={e=>setTodosTitle(e.target.value)}\n            onKeyPress={addTodo}\n            style={{backgroundColor:'white', borderRadius: '10px',marginLeft:'-5px', paddingLeft:'10px'}}\n            placeholder='Todo name'\n            />\n            \n          </div>\n         \n         \n            <TodoList todos={todos}/>\n   \n      </div>\n      </Context.Provider>\n    );\n  \n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'materialize-css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}